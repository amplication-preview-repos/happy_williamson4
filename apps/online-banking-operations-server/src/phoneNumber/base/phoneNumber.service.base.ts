/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  PhoneNumber as PrismaPhoneNumber,
  Client as PrismaClient,
} from "@prisma/client";

export class PhoneNumberServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.PhoneNumberCountArgs, "select">
  ): Promise<number> {
    return this.prisma.phoneNumber.count(args);
  }

  async phoneNumbers(
    args: Prisma.PhoneNumberFindManyArgs
  ): Promise<PrismaPhoneNumber[]> {
    return this.prisma.phoneNumber.findMany(args);
  }
  async phoneNumber(
    args: Prisma.PhoneNumberFindUniqueArgs
  ): Promise<PrismaPhoneNumber | null> {
    return this.prisma.phoneNumber.findUnique(args);
  }
  async createPhoneNumber(
    args: Prisma.PhoneNumberCreateArgs
  ): Promise<PrismaPhoneNumber> {
    return this.prisma.phoneNumber.create(args);
  }
  async updatePhoneNumber(
    args: Prisma.PhoneNumberUpdateArgs
  ): Promise<PrismaPhoneNumber> {
    return this.prisma.phoneNumber.update(args);
  }
  async deletePhoneNumber(
    args: Prisma.PhoneNumberDeleteArgs
  ): Promise<PrismaPhoneNumber> {
    return this.prisma.phoneNumber.delete(args);
  }

  async getClient(parentId: string): Promise<PrismaClient | null> {
    return this.prisma.phoneNumber
      .findUnique({
        where: { id: parentId },
      })
      .client();
  }
}

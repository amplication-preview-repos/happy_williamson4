/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { PhoneNumber } from "./PhoneNumber";
import { PhoneNumberCountArgs } from "./PhoneNumberCountArgs";
import { PhoneNumberFindManyArgs } from "./PhoneNumberFindManyArgs";
import { PhoneNumberFindUniqueArgs } from "./PhoneNumberFindUniqueArgs";
import { CreatePhoneNumberArgs } from "./CreatePhoneNumberArgs";
import { UpdatePhoneNumberArgs } from "./UpdatePhoneNumberArgs";
import { DeletePhoneNumberArgs } from "./DeletePhoneNumberArgs";
import { Client } from "../../client/base/Client";
import { PhoneNumberService } from "../phoneNumber.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => PhoneNumber)
export class PhoneNumberResolverBase {
  constructor(
    protected readonly service: PhoneNumberService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "read",
    possession: "any",
  })
  async _phoneNumbersMeta(
    @graphql.Args() args: PhoneNumberCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [PhoneNumber])
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "read",
    possession: "any",
  })
  async phoneNumbers(
    @graphql.Args() args: PhoneNumberFindManyArgs
  ): Promise<PhoneNumber[]> {
    return this.service.phoneNumbers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => PhoneNumber, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "read",
    possession: "own",
  })
  async phoneNumber(
    @graphql.Args() args: PhoneNumberFindUniqueArgs
  ): Promise<PhoneNumber | null> {
    const result = await this.service.phoneNumber(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PhoneNumber)
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "create",
    possession: "any",
  })
  async createPhoneNumber(
    @graphql.Args() args: CreatePhoneNumberArgs
  ): Promise<PhoneNumber> {
    return await this.service.createPhoneNumber({
      ...args,
      data: {
        ...args.data,

        client: args.data.client
          ? {
              connect: args.data.client,
            }
          : undefined,
      },
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => PhoneNumber)
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "update",
    possession: "any",
  })
  async updatePhoneNumber(
    @graphql.Args() args: UpdatePhoneNumberArgs
  ): Promise<PhoneNumber | null> {
    try {
      return await this.service.updatePhoneNumber({
        ...args,
        data: {
          ...args.data,

          client: args.data.client
            ? {
                connect: args.data.client,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => PhoneNumber)
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "delete",
    possession: "any",
  })
  async deletePhoneNumber(
    @graphql.Args() args: DeletePhoneNumberArgs
  ): Promise<PhoneNumber | null> {
    try {
      return await this.service.deletePhoneNumber(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => Client, {
    nullable: true,
    name: "client",
  })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  async getClient(
    @graphql.Parent() parent: PhoneNumber
  ): Promise<Client | null> {
    const result = await this.service.getClient(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}

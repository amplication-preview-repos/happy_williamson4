/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ClientService } from "../client.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ClientCreateInput } from "./ClientCreateInput";
import { Client } from "./Client";
import { ClientFindManyArgs } from "./ClientFindManyArgs";
import { ClientWhereUniqueInput } from "./ClientWhereUniqueInput";
import { ClientUpdateInput } from "./ClientUpdateInput";
import { BankAccountFindManyArgs } from "../../bankAccount/base/BankAccountFindManyArgs";
import { BankAccount } from "../../bankAccount/base/BankAccount";
import { BankAccountWhereUniqueInput } from "../../bankAccount/base/BankAccountWhereUniqueInput";
import { EmailFindManyArgs } from "../../email/base/EmailFindManyArgs";
import { Email } from "../../email/base/Email";
import { EmailWhereUniqueInput } from "../../email/base/EmailWhereUniqueInput";
import { PhoneNumberFindManyArgs } from "../../phoneNumber/base/PhoneNumberFindManyArgs";
import { PhoneNumber } from "../../phoneNumber/base/PhoneNumber";
import { PhoneNumberWhereUniqueInput } from "../../phoneNumber/base/PhoneNumberWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ClientControllerBase {
  constructor(
    protected readonly service: ClientService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Client })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ClientCreateInput,
  })
  async createClient(@common.Body() data: ClientCreateInput): Promise<Client> {
    return await this.service.createClient({
      data: data,
      select: {
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Client] })
  @ApiNestedQuery(ClientFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async clients(@common.Req() request: Request): Promise<Client[]> {
    const args = plainToClass(ClientFindManyArgs, request.query);
    return this.service.clients({
      ...args,
      select: {
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async client(
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Client | null> {
    const result = await this.service.client({
      where: params,
      select: {
        createdAt: true,
        dateOfBirth: true,
        id: true,
        name: true,
        password: true,
        updatedAt: true,
        username: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ClientUpdateInput,
  })
  async updateClient(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() data: ClientUpdateInput
  ): Promise<Client | null> {
    try {
      return await this.service.updateClient({
        where: params,
        data: data,
        select: {
          createdAt: true,
          dateOfBirth: true,
          id: true,
          name: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Client })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteClient(
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Client | null> {
    try {
      return await this.service.deleteClient({
        where: params,
        select: {
          createdAt: true,
          dateOfBirth: true,
          id: true,
          name: true,
          password: true,
          updatedAt: true,
          username: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/bankAccounts")
  @ApiNestedQuery(BankAccountFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "BankAccount",
    action: "read",
    possession: "any",
  })
  async findBankAccounts(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<BankAccount[]> {
    const query = plainToClass(BankAccountFindManyArgs, request.query);
    const results = await this.service.findBankAccounts(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        currentBalance: true,
        id: true,
        initialBalance: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/bankAccounts")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectBankAccounts(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: BankAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankAccounts: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/bankAccounts")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateBankAccounts(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: BankAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankAccounts: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/bankAccounts")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectBankAccounts(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: BankAccountWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      bankAccounts: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/emails")
  @ApiNestedQuery(EmailFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Email",
    action: "read",
    possession: "any",
  })
  async findEmails(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<Email[]> {
    const query = plainToClass(EmailFindManyArgs, request.query);
    const results = await this.service.findEmails(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        emailAddress: true,
        id: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/emails")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectEmails(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/emails")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updateEmails(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/emails")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectEmails(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: EmailWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      emails: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/phoneNumbers")
  @ApiNestedQuery(PhoneNumberFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "PhoneNumber",
    action: "read",
    possession: "any",
  })
  async findPhoneNumbers(
    @common.Req() request: Request,
    @common.Param() params: ClientWhereUniqueInput
  ): Promise<PhoneNumber[]> {
    const query = plainToClass(PhoneNumberFindManyArgs, request.query);
    const results = await this.service.findPhoneNumbers(params.id, {
      ...query,
      select: {
        client: {
          select: {
            id: true,
          },
        },

        createdAt: true,
        id: true,
        phoneNumber: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/phoneNumbers")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async connectPhoneNumbers(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PhoneNumberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phoneNumbers: {
        connect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/phoneNumbers")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async updatePhoneNumbers(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PhoneNumberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phoneNumbers: {
        set: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/phoneNumbers")
  @nestAccessControl.UseRoles({
    resource: "Client",
    action: "update",
    possession: "any",
  })
  async disconnectPhoneNumbers(
    @common.Param() params: ClientWhereUniqueInput,
    @common.Body() body: PhoneNumberWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      phoneNumbers: {
        disconnect: body,
      },
    };
    await this.service.updateClient({
      where: params,
      data,
      select: { id: true },
    });
  }
}
